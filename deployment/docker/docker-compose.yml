version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: personalizeai-postgres
    environment:
      POSTGRES_DB: personalizeai_db
      POSTGRES_USER: personalizeai_admin
      POSTGRES_PASSWORD: PersonalizeAI2024!
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U personalizeai_admin -d personalizeai_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: personalizeai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../../backend
      dockerfile: ../deployment/docker/Dockerfile.backend
    container_name: personalizeai-backend
    environment:
      - DATABASE_URL=postgresql://personalizeai_admin:PersonalizeAI2024!@postgres:5432/personalizeai_db
      - REDIS_URL=redis://redis:6379/0
      - FLASK_ENV=development
      - SECRET_KEY=dev-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Dashboard
  frontend:
    build:
      context: ../../frontend
      dockerfile: ../deployment/docker/Dockerfile.frontend
    container_name: personalizeai-frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_APP_NAME=PersonalizeAI Platform
      - VITE_ENVIRONMENT=development
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ../../frontend:/app
      - /app/node_modules
    restart: unless-stopped

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: personalizeai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: personalizeai-network

