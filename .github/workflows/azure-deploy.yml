name: Deploy PersonalizeAI to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: personalizeai-api
  AZURE_WEBAPP_PACKAGE_PATH: './backend'
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: üöÄ Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: üì¶ Create and start virtual environment
      run: |
        cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        python -m venv venv
        source venv/bin/activate
        
    - name: üìã Install dependencies
      run: |
        cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üß™ Run tests (if available)
      run: |
        cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        source venv/bin/activate
        # Add test commands here when tests are available
        # python -m pytest tests/
        
    - name: üìÅ Create deployment package
      run: |
        cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        # Create startup script for Azure
        echo "#!/bin/bash" > startup.sh
        echo "cd /home/site/wwwroot" >> startup.sh
        echo "pip install -r requirements.txt" >> startup.sh
        echo "python src/main.py" >> startup.sh
        chmod +x startup.sh
        
    - name: üåê Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        startup-command: 'bash startup.sh'

  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-and-deploy-backend
    
    steps:
    - name: üöÄ Checkout code
      uses: actions/checkout@v4
      
    - name: üü¢ Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
        
    - name: üì¶ Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: üîß Configure API URL for production
      run: |
        cd frontend/src
        # Update API URL to use Azure backend
        sed -i "s|const API_BASE_URL = .*|const API_BASE_URL = 'https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api';|g" App.jsx
        
    - name: üèóÔ∏è Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: üåê Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/frontend"
        api_location: ""
        output_location: "dist"

  configure-backend:
    runs-on: ubuntu-latest
    needs: build-and-deploy-backend
    
    steps:
    - name: üîê Configure Azure Web App Settings
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          # Set application settings
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group personalizeai-rg \
            --settings \
              DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              FLASK_ENV="production" \
              PYTHONPATH="/home/site/wwwroot" \
              SCM_DO_BUILD_DURING_DEPLOYMENT="true" \
              WEBSITES_PORT="8000"
              
          # Configure startup command
          az webapp config set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group personalizeai-rg \
            --startup-file "bash startup.sh"
            
          # Enable CORS for frontend
          az webapp cors add \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group personalizeai-rg \
            --allowed-origins "https://zealous-moss-049b20a10.1.azurestaticapps.net"
            
          # Restart the web app to apply changes
          az webapp restart \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group personalizeai-rg

  health-check:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-backend, configure-backend]
    
    steps:
    - name: üè• Health Check Backend
      run: |
        echo "Waiting for backend to start..."
        sleep 30
        
        # Check backend health
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health)
        if [ $response -eq 200 ]; then
          echo "‚úÖ Backend health check passed"
        else
          echo "‚ùå Backend health check failed with status: $response"
          exit 1
        fi
        
        # Check API endpoints
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/subscribers)
        if [ $response -eq 200 ]; then
          echo "‚úÖ API endpoints working"
        else
          echo "‚ùå API endpoints not responding with status: $response"
          exit 1
        fi
        
    - name: üåê Health Check Frontend
      run: |
        echo "Checking frontend deployment..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://zealous-moss-049b20a10.1.azurestaticapps.net)
        if [ $response -eq 200 ]; then
          echo "‚úÖ Frontend health check passed"
        else
          echo "‚ùå Frontend health check failed with status: $response"
          exit 1
        fi

  notify-success:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-frontend, health-check]
    if: success()
    
    steps:
    - name: üéâ Deployment Success Notification
      run: |
        echo "üéâ PersonalizeAI Deployment Successful!"
        echo ""
        echo "üåê Frontend Dashboard: https://zealous-moss-049b20a10.1.azurestaticapps.net"
        echo "üîß Backend API: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "üè• Health Check: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
        echo ""
        echo "‚úÖ All services are running and healthy!"

